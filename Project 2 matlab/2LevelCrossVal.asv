load_data;

addpath(genpath('Tools'));

attributeNames = FF_table(:,5:14).Properties.VariableNames;

% Extracting X and Y data. X = RH, Ws, Rain and Y = temp. 
X = table2array(FF_table(:,6:8));
Y = table2array(FF_table(:,5));

% Removing row with NaN's and missing classification. 
X(166,:) = [];
Y(166,:) = [];

%%

K1 = 10;
K2 = 10;
S = 3;

lambda = 10.^(-5:8);
h = [1:10];

ANNValErr = [K1,K2];
regularizedLinRegValErr = [K1,K2];

for i = 1:K1
    CV1 = cvpartition(length(X),'KFold',K1);
    
    xTrainOuter = X(CV1.training(i),:);
    xTestOuter = X(CV1.test(i),:);
    yTrainOuter = Y(CV1.training(i));
    yTestOuter = Y(CV1.training(i));
    
    for j = 1:K2
        
        CV2 = cvpartition(length(xTrainOuter),'KFold',K2);
        
        xTrainInner = xTrainOuter(CV2.training(j),:);
        xTestInner = xTestOuter(CV2.test(j),:);
        yTrainInner = yTrainOuter(CV2.training(j));
        yTestInner = yTrainOuter(CV2.test(j));
        
        % Training the models with different h and lambda values.
        
        ANNResults = nr_main(xTrainInner,yTrainInner,xTestInner,yTestInner,h(j));
        
        
        
        mu = mean(xTrainInner(:,2:end));
        sigma = std(xTrainInner(:,2:end));
        xTrainInner(:,2:end) = (xTrainInner(:,2:end) - mu) ./ sigma;
        xTestInner(:,2:end) = (xTestInner(:,2:end) - mu) ./ sigma;
        
        Xty = xTrainInner' * yTrainInner;
        Xtx = xTrainInner' * xTrainInner;
    end
end

            
            
                         